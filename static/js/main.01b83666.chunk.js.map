{"version":3,"sources":["types/CompletionFilter.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["CompletionFilter","TodoItem","selectedTodo","todo","changeSelectedTodo","id","title","completed","isTodoSelected","className","type","onClick","classNames","TodoList","todos","map","TodoFilter","searchQuery","changeSearchQuery","completionStatus","changeCompletionStatus","value","onChange","event","target","Completed","Active","All","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","userId","useEffect","getUser","foundUser","href","email","name","postsFilter","dataToFilter","completionParam","filteredTodos","normalisedQuery","toLowerCase","trim","filter","includes","filterByQuery","filterByCompletion","App","todosFromServer","setTodosFromServer","setFilteredTodos","isLoaderVisible","setIsLoaderVisible","setSelectedTodo","completionFilter","setCompletionFilter","setSearchQuery","todoList","finally","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.01b83666.chunk.js","sourcesContent":["export enum CompletionFilter {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo,\n  selectedTodo: Todo | null,\n  changeSelectedTodo: (value: Todo) => void,\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  selectedTodo,\n  todo,\n  changeSelectedTodo,\n}) => {\n  const { id, title, completed } = todo;\n  const isTodoSelected = id === selectedTodo?.id;\n\n  return (\n    <tr data-cy=\"todo\" className=\"\">\n      <td className=\"is-vcentered\">\n        {id}\n      </td>\n\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={completed\n            ? 'has-text-success'\n            : 'has-text-danger'}\n        >\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => changeSelectedTodo(todo)}\n        >\n          <span className=\"icon\">\n            <i className={classNames(\n              'far',\n              {\n                'fa-eye': !isTodoSelected,\n                'fa-eye-slash': isTodoSelected,\n              },\n            )}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodo: Todo | null,\n  changeSelectedTodo: (value: Todo) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  changeSelectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          selectedTodo={selectedTodo}\n          changeSelectedTodo={changeSelectedTodo}\n        />\n      ))}\n    </tbody>\n  </table>\n);\n","import { CompletionFilter } from '../../types/CompletionFilter';\n\ntype Props = {\n  searchQuery: string,\n  changeSearchQuery: (value: string) => void,\n  completionStatus: CompletionFilter,\n  changeCompletionStatus: (value: CompletionFilter) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  searchQuery,\n  changeSearchQuery,\n  completionStatus,\n  changeCompletionStatus,\n}) => {\n  const handleCompletionStatusChange = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    switch (event.target.value) {\n      case CompletionFilter.Completed:\n        changeCompletionStatus(CompletionFilter.Completed);\n        break;\n\n      case CompletionFilter.Active:\n        changeCompletionStatus(CompletionFilter.Active);\n        break;\n\n      default:\n        changeCompletionStatus(CompletionFilter.All);\n    }\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            value={completionStatus}\n            data-cy=\"statusSelect\"\n            onChange={handleCompletionStatusChange}\n          >\n            <option value={CompletionFilter.All}>All</option>\n            <option value={CompletionFilter.Active}>Active</option>\n            <option value={CompletionFilter.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchQuery}\n          onChange={(event) => changeSearchQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {searchQuery && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => changeSearchQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedTodo: Todo,\n  changeSelectedTodo: (value: null) => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  changeSelectedTodo,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const {\n    id, title, userId, completed,\n  } = selectedTodo;\n\n  useEffect(() => {\n    getUser(userId).then((foundUser) => setUser(foundUser));\n  }, [selectedTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => changeSelectedTodo(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              {completed\n                ? (\n                  <strong className=\"has-text-success\">\n                    Done\n                  </strong>\n                )\n                : (\n                  <strong className=\"has-text-danger\">\n                    Planned\n                  </strong>\n                )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { CompletionFilter } from './types/CompletionFilter';\n\nfunction filterByQuery(todos: Todo[], searchQuery: string) {\n  const normalisedQuery = searchQuery.toLowerCase().trim();\n\n  return todos.filter(({ title }) => title.toLowerCase().includes(normalisedQuery));\n}\n\nfunction filterByCompletion(todos: Todo[], completionParam: CompletionFilter) {\n  if (completionParam === CompletionFilter.All) {\n    return todos;\n  }\n\n  const completionStatus = completionParam === CompletionFilter.Completed;\n\n  return todos.filter(({ completed }) => completed === completionStatus);\n}\n\nfunction postsFilter(dataToFilter: Todo[], completionParam: CompletionFilter, searchQuery: string) {\n  let filteredTodos = dataToFilter;\n\n  filteredTodos = filterByQuery(filteredTodos, searchQuery);\n  filteredTodos = filterByCompletion(filteredTodos, completionParam);\n\n  return filteredTodos;\n}\n\nexport const App: React.FC = () => {\n  const [todosFromServer, setTodosFromServer] = useState<Todo[]>([]);\n  const [filteredTodos, setFilteredTodos] = useState<Todo[]>([]);\n\n  const [isLoaderVisible, setIsLoaderVisible] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  const [completionFilter, setCompletionFilter] = useState<CompletionFilter>(CompletionFilter.All);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  useEffect(() => {\n    setIsLoaderVisible(true);\n\n    getTodos()\n      .then((todoList) => {\n        setTodosFromServer(todoList);\n      })\n      .finally(() => setIsLoaderVisible(false));\n  }, []);\n\n  useEffect(() => {\n    setFilteredTodos(postsFilter(todosFromServer, completionFilter, searchQuery));\n  }, [todosFromServer, completionFilter, searchQuery]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                searchQuery={searchQuery}\n                changeSearchQuery={setSearchQuery}\n                completionStatus={completionFilter}\n                changeCompletionStatus={setCompletionFilter}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoaderVisible\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={filteredTodos}\n                    selectedTodo={selectedTodo}\n                    changeSelectedTodo={setSelectedTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          changeSelectedTodo={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}